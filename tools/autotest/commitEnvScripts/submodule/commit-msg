#!/bin/sh
# From Gerrit Code Review 3.1.0
#
# Part of Gerrit Code Review (https://www.gerritcodereview.com/)
#
# Copyright (C) 2009 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# get commit msg
# commit_msg=`cat $1` #get all commit message
if [[ $CI_COMMIT_MESSAGE ]]; then
    msg=$CI_COMMIT_MESSAGE
else
    #read msg < ../.git/modules/sdk/COMMIT_EDITMSG 
    msg=$(cat "$1")
fi
# echo -e "\033[31m The commit msg: \033[0m $msg"
echo -e "The commit msg:\n\n$msg"
echo -e "\033[32m \n ****HOOK LOG****\n \033[0m"
#redmineid=`sed '/^redmine:/!d;s/.*=//' ../.git/modules/sdk/COMMIT_EDITMSG ` 
redmineid=$(echo "$msg" | grep "redmine: #")
echo -e " The redmine content: $redmineid"

#tapdid=`sed '/^tapd: bug|story/!d;s/.*=//' .git/COMMIT_EDITMSG` 
#echo -e " The tapd content: $tapdid"

#tapd_bug=`sed '/^tapd: bug/!d;s/.*=//' ../.git/modules/sdk/COMMIT_EDITMSG ` 
tapd_bug=$(echo "$msg" | grep "tapd: bug")
echo -e " The tapd_bug content: $tapd_bug"

ext_redmine_bug=$(echo "$msg" | grep "ext-redmine: bug")
echo -e " The ext_redmine_bug content: $ext_redmine_bug"

#tapd_story=`sed '/^tapd: story/!d;s/.*=//' ../.git/modules/sdk/COMMIT_EDITMSG `
tapd_story=$(echo "$msg" | grep "tapd: story") 
echo -e " The tapd_story content: $tapd_story"
ext_redmine_feat=$(echo "$msg" | grep "ext-redmine: feat")
echo -e " The ext_redmine_feat content: $ext_redmine_feat"

#if [[ $string == mas* ]];  start with 'mas' in string
# get branch
remote_branch=`git rev-parse --abbrev-ref --symbolic-full-name @{u}`
echo -e " remote_branch is $remote_branch"
local_branch=`git symbolic-ref --short -q HEAD`
echo -e " local_branch is $local_branch"
if [[ $remote_branch ]]; then
    branch=$remote_branch
else
    branch=$local_branch
fi
echo -e " checked branch is $branch"
# if the msg is merge then skip it
mergePattern='^Merge '
if [[ $msg =~ $mergePattern ]]; then
    echo -e "\033[32m skip the merge, commit success! \033[0m"
    exit 0
fi
# check the commit msg
br1="master"
br2="Solution_release_1.1.0"

maxLength=50
length=${#msg}
pattern_redmine='^redmine: #[0-9]+'
pattern_tapd_bug='^tapd: bug#[0-9]+'
pattern_tapd_story='^tapd: story#[0-9]+'
pattern_ext_redmine_bug='^ext-redmine: bug#[0-9]+'
pattern_ext_redmine_feat='^ext-redmine: feat#[0-9]+'
#pattern_header='^\[(doc|int|ble|sol|rel|gui|AI)+\] '
pattern_header='^\[(bug|new|opt|chore)\]\[[a-zA-Z0-9_ ]+\].'


if [[ $tapd_bug ]]; then
    #echo -e " tapdid is $tapd_bug"
    tapdid=$tapd_bug
    pattern_tapd=$pattern_tapd_bug
else
    #echo -e " tapdid is $tapd_story"
    tapdid=$tapd_story
    pattern_tapd=$pattern_tapd_story
fi

if [[ $ext_redmine_bug ]]; then
    #echo -e " ext-redmineid is $ext_redmine_bug"
    ext_remineid=$ext_redmine_bug
    pattern_ext_redmine=$pattern_ext_redmine_bug
else
    #echo -e " ext_remineid is $ext_redmine_feat"
    ext_remineid=$ext_redmine_feat
    pattern_ext_redmine=$pattern_ext_redmine_feat
fi

#if [[ $branch == *"$br1"* || $branch == *"$br2"* ]]; then
if [[ $branch == *"$br1"* ]]; then
    echo -e "\033[32m ******** \033[0m"
    if [[ $msg =~ $pattern_header && ($redmineid =~ $pattern_redmine || $tapdid =~ $pattern_tapd || $ext_remineid =~ $pattern_ext_redmine) ]]; then
        echo -e "\033[32m commit success! \033[0m"
    else
        echo -e "\033[31m Error: must be correct tags and redmineid or tapdid \033[m"
        echo -e "\033[31m eg: [bug|new|opt|chore][module_name] Fixed games assert when start \033[m"
        echo -e "\033[31m eg: redmine: #1999, REDMINE-1999 \033[m"
        echo -e "\033[31m eg: ext-redmine: bug#2356|ext-redmine: feat#2356 \033[m"
        echo -e "\033[31m eg: tapd: bug#1999|tapd: story#1999 \033[m"
        exit 1
    fi
else
    if [[ $msg =~ $pattern_header ]]; then
        echo -e "\033[32m commit success! \033[0m"
    else
        echo -e "\033[31m Error: the commit message is irregular \033[m"
        echo -e "\033[31m Error: must be three correct tags [doc|int|ble|sol|rel|gui|AI]\033[m"
        echo -e "\033[31m eg: [bug|new|opt|chore][module_name] Fixed watchdemo crush bug \033[m"
        exit 1
    fi
fi


# avoid [[ which is not POSIX sh.
if test "$#" != 1 ; then
  echo "$0 requires an argument."
  exit 1
fi

if test ! -f "$1" ; then
  echo "file does not exist: $1"
  exit 1
fi

# Do not create a change id if requested
if test "false" = "`git config --bool --get gerrit.createChangeId`" ; then
  exit 0
fi

# $RANDOM will be undefined if not using bash, so don't use set -u
random=$( (whoami ; hostname ; date; cat $1 ; echo $RANDOM) | git hash-object --stdin)
dest="$1.tmp.${random}"

trap 'rm -f "${dest}"' EXIT

if ! git stripspace --strip-comments < "$1" > "${dest}" ; then
   echo "cannot strip comments from $1"
   exit 1
fi

if test ! -s "${dest}" ; then
  echo "file is empty: $1"
  exit 1
fi

# Avoid the --in-place option which only appeared in Git 2.8
# Avoid the --if-exists option which only appeared in Git 2.15
if ! git -c trailer.ifexists=doNothing interpret-trailers \
      --trailer "Change-Id: I${random}" < "$1" > "${dest}" ; then
  echo "cannot insert change-id line in $1"
  exit 1
fi

if ! mv "${dest}" "$1" ; then
  echo "cannot mv ${dest} to $1"
  exit 1
fi
