#
# This file is part of the MicroPython project, http://micropython.org/
#
# The MIT License (MIT)
#
# Copyright (c) 2017 SummerGift <zhangyuan@rt-thread.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
 
from __future__ import print_function

import re
import os
import sys
import platform
import argparse
import textwrap
import shutil

from gen_qstr import make_bytes
    
def parse_src_qstr(line):
    line=line.rstrip()
    if 'QDEF' in line:
        qstr_array=line.split(',')
        qstr_array[0]=qstr_array[0][12:]
        return [qstr_array]
    else:
        return None
    
def rm_dup_qstr(fpsrc, fpdst):
    print("// This file was automatically generated by makeqstrdata.py")
    print("// Postprocessed by rm_dup.py")
    qstr_list=[]
    for line in fpsrc:
        qstr_parsed = parse_src_qstr(line)
        if (qstr_parsed!=None):
            qstr_list+=qstr_parsed
    for i in  qstr_list:
        print('QDEF(MP_QSTR%s,%s'%(i[0],i[1]))
            
    qstr_list2=[]    
    for line in fpdst:
        qstr_parsed = parse_src_qstr(line)
        if (qstr_parsed!=None):
            qstr_list2+=qstr_parsed
    qstr_list2.sort()   

    qstr_list_all=qstr_list
    for i in qstr_list2:
        dup=0
        for j in qstr_list:
            left_key=i[0]
            right_key=j[0]
            if left_key==right_key:
                dup=1
                break
        if (dup==0):
            print (make_bytes(1,1,i[0][1:]))
    print("\n#if MICROPY_USER_EXTMODS\n#include \"qstrdefs.user.extmods.h\"\n#endif\n")
    
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="General Usage ", 
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=textwrap.dedent('''\
         Merge 2 files and remove duplicated QDEF:
         python rm_dup --src=<source> --dest=<destination>
         '''))

    parser.add_argument(
        '--src',
        type=str,
        default='qstrdefs.generated.h',
        help='Source')
    parser.add_argument(
        '--dest',
        type=str,
        default='qstrdefs.lvgl.h',
        help='Destination')
        
    FLAGS, unparsed = parser.parse_known_args()
    
    sys.stdout = open("a.txt", "w+")
    fpsrc=open(FLAGS.src,"r")
    fpdest=open(FLAGS.dest,"r")
    rm_dup_qstr(fpsrc, fpdest)
    fpsrc.close()
    fpdest.close()
    sys.stdout.close()
    os.remove(FLAGS.src)
    shutil.move("a.txt", FLAGS.src)
    